networks:
  hasher:
    internal: true
  redis:
    internal: true
  rng:
    internal: true
  webui:
    internal: false
  worker:
    internal: true
#Balanceadores de carga (servicios)
services:
  # El nombre es fqdn podemos poner lo que queramos hasher.dockercoins.san.com
  hasher:
    deploy:
      #Esto significa que es un deployment
      mode: replicated
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      resources: 
        limits: 
          cpus: "0.1"
          memory: 100M
        # Si reservamos es la que nos van a proporcionar
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: wget -q --spider localhost:8080
      timeout: 1s
    # para diferentes mifroservicios
    image: lherrerom/dockercoins:latest-hasher
    # Si queremos un proyecto por microservicio
    # image: lherrerom/dockercoins-hasher:latest
    networks:
      #La red intrna que hemos creado 
      - hasher
  redis:
    deploy:
      #Esto significa que es un deployment
      mode: replicated
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      resources: 
        limits: 
          cpus: "0.1"
          memory: 100M
        # Si reservamos es la que nos van a proporcionar
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      - 6379
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: redis-cli
      timeout: 1s
    # cogemos la imagen oficial de redis
    image: redis:6.0.9-alpine3.12@sha256:aa31e6d2afc72d2222ed3953587197c324f615861771637a64053f9d99ba4b74
    networks:
      #La red intrna que hemos creado 
      - redis
    volumes:
      # Para Openshift es necesario crear un volumen (en swarm no es suficiente)
      # Serña una carpeta en blanco (lo hemos sacado del 
      - redis:/data
  rng:
    deploy:
      #DAemonSet
      mode: global
      placement:
        constraints:
          - node.role == worker
      #replicas: 1 -- al ser demonio no lo podemos replicas
      resources: 
        limits: 
          cpus: "0.1"
          memory: 100M
        # Si reservamos es la que nos van a proporcionar
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: wget -q --spider localhost:8080
      timeout: 1s
    # cogemos la imagen oficial de redis
    image: lherrerom/dockercoins:latest-rng
    networks:
      #La red intrna que hemos creado 
      - rng

  webui:
    deploy:
      mode: replicated
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      resources: 
        limits: 
          cpus: "0.1"
          memory: 100M
        # Si reservamos es la que nos van a proporcionar
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      # Para saber si una imagen tiene curl
      # docker run --rm nombreIMAGEN which curl
      test: curl -f localhost:8080
      timeout: 1s
    # cogemos la imagen oficial de redis
    image: lherrerom/dockercoins:latest-webui
    networks:
      # La web se tiene que conectar a la red de redis (la interna). Es como si tuviera dos tarjetas de red
      - redis
      #La red intrna que hemos creado 
      - webui
  worker:
    deploy:
      #Esto significa que es un deployment
      mode: replicated
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      resources: 
        limits: 
          cpus: "0.1"
          memory: 100M
        # Si reservamos es la que nos van a proporcionar
        reservations:
          cpus: "0.1"
          memory: 100M
    # No exponemos puertos
    #expose:
    #  - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: netstat -nt | grep ESTABLISHED | grep -q 6379
      timeout: 1s
    # para diferentes mifroservicios
    image: lherrerom/dockercoins:latest-worker
    # Si queremos un proyecto por microservicio
    # image: lherrerom/dockercoins-hasher:latest
    networks:
      #Con docker warm si no ponemos esto no hay conexión. En Kubernetes, sin embargo por defecto está abierto    
      - hasher
      - redis
      - rng
      #La red intrna que hemos creado 
      - worker
version: '3.8'
volumes: 
  redis: 

      
          
  
